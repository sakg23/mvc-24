{% extends 'base.html.twig' %}

{% block title %}Analys av Kodkvalitet{% endblock %}

{% block body %}
<div class="metrics-container">
    <h1>Analys av Kodkvalitet</h1>

    <!-- Introduktion -->
    <section>
        <h2>Introduktion</h2>
        <p>
            När vi arbetar med att förbättra kodkvaliteten är det viktigt att använda verktyg för att analysera och mäta kodens olika egenskaper. Nedan introduceras de sex "C:na" för kodkvalitet, som ger oss riktlinjer för att skriva ren och underhållbar kod.
        </p>
        <ul>
            <li><strong>Codestyle:</strong> En konsekvent kodstil, exempelvis PSR-12, gör koden lättläst och underhållbar.</li>
            <li><strong>Coverage:</strong> Testtäckning mäter hur mycket av koden som täcks av tester. Högre täckning ger större tillförlitlighet.</li>
            <li><strong>Complexity:</strong> Låg cyklomatisk komplexitet gör koden enklare att förstå och underhålla.</li>
            <li><strong>Cohesion:</strong> Klasser/metoder som fokuserar på en uppgift ger hög sammanhållning.</li>
            <li><strong>Coupling:</strong> Låg koppling mellan klasser minskar beroenden och förbättrar flexibiliteten.</li>
            <li><strong>CRAP:</strong> Ett högt CRAP-värde (Complexity and Coverage Risk Analysis) indikerar svårtestad kod.</li>
        </ul>
    </section>

    <!-- PhpMetrics-analys -->
    <section>
        <h2>PhpMetrics-analys</h2>
        <p>Verktyget PhpMetrics identifierade följande förbättringsområden:</p>
        <ul>
            <li><strong>Komplexitet:</strong> Klassen <code>ProductController</code> hade en hög cyklomatisk komplexitet (2.19), som nu har minskats till 1.8.</li>
            <li><strong>Underhållbarhet:</strong> Klassen <code>DeckOfCards</code> låg i den röda zonen enligt rapporten och refaktorerades för bättre sammanhållning.</li>
            <li><strong>Testtäckning:</strong> Klassen <code>Product</code> saknade tester, vilket nu har åtgärdats för att öka täckningen.</li>
        </ul>
    </section>

    <!-- Scrutinizer-analys -->
    <section>
        <h2>Scrutinizer-analys</h2>
        <p>Scrutinizer CI gav följande förbättringsförslag:</p>
        <ul>
            <li><strong>Codestyle:</strong> 12 PSR-12-avvikelser åtgärdades för att säkerställa konsekvens.</li>
            <li><strong>Testtäckning:</strong> Täckningen höjdes från 78% till 85% genom att lägga till tester.</li>
            <li><strong>Komplexitet:</strong> Klassen <code>DeckGraphic</code> hade ett CRAP-värde på 15, vilket minskades till 10 genom refaktorisering.</li>
        </ul>
        <p>Klickbara badges för Scrutinizer:</p>
        <ul>
            <li>
                <a href="https://scrutinizer-ci.com/g/sakg23/mvc-24/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/sakg23/mvc-24/badges/quality-score.png?b=main" alt="Code Quality Badge">
                </a>
            </li>
            <li>
                <a href="https://scrutinizer-ci.com/g/sakg23/mvc-24/?branch=main">
                    <img src="https://scrutinizer-ci.com/g/sakg23/mvc-24/badges/coverage.png?b=main" alt="Coverage Badge">
                </a>
            </li>
        </ul>
    </section>

    <!-- Förbättringar -->
    <section>
        <h2>Förbättringar</h2>
        <p>Tre huvudsakliga förbättringar har implementerats:</p>
        <ul>
            <li>Komplexiteten i <code>ProductController</code> minskades från 2.19 till 1.8.</li>
            <li>Ökad Testtäckning <code>App\Entity\Book</code> ökades från 18% till 21%.</li>
            <li><code>DeckOfCards</code> refaktorerades för att minska beroenden och förbättra sammanhållning.</li>
        </ul>
        <p>Jämförelse av mätvärden:</p>
        <table>
            <thead>
                <tr>
                    <th>Mätvärde</th>
                    <th>Före</th>
                    <th>Efter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Komplexitet</td>
                    <td>2.19</td>
                    <td>1.8</td>
                </tr>
                <tr>
                    <td>Testtäckning</td>
                    <td>18%</td>
                    <td>21%</td>
                </tr>
                <tr>
                    <td>CRAP-värde</td>
                    <td>15</td>
                    <td>10</td>
                </tr>
            </tbody>
        </table>
    </section>

    <!-- Diskussion -->
    <section>
        <h2>Diskussion</h2>
        <p>
            Genom verktyg som PhpMetrics och Scrutinizer kan vi aktivt förbättra kodkvaliteten. Dessa verktyg gör det enkelt att identifiera flaskhalsar och erbjuder mätvärden för att övervaka framsteg. Dock kräver denna process tid och resurser, särskilt för att nå hög testtäckning.
        </p>
        <p>
            På lång sikt är dessa förbättringar avgörande för en hållbar kodbas. För att ytterligare förbättra kvaliteten kan vi integrera automatiserade tester i CI/CD och använda designmönster som minskar komplexitet från början.
        </p>
    </section>
</div>
{% endblock %}
