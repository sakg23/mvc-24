diff a/src/Controller/LuckyControllerTwig.php b/src/Controller/LuckyControllerTwig.php	(rejected hunks)
@@ -43,8 +43,15 @@ class LuckyControllerTwig extends AbstractController
             När det gäller kodtäckningen lyckades jag nå över 90% för flera av mina modellklasser, vilket jag är riktigt nöjd med. Jag fokuserade på att skriva tester som täckte så många grenar och scenarier som möjligt. Det var också en bra övning att använda kodtäckningsrapporten för att identifiera vilka delar som saknade tester och därefter förbättra dem.
             Min egen kod känns till största delen som “testbar kod”, men det fanns definitivt delar som var mer utmanande att testa. Till exempel var vissa klasser mindre testbara eftersom de hade hårt kopplade beroenden eller saknade tydlig struktur för att hantera vissa fall. Jag märkte att jag behövde skriva om delar av koden för att göra den mer modulär och isolerad, vilket gjorde att testerna blev lättare att skriva och förstå. Ett exempel var att ta bort parametrar från vissa konstruktörer, eftersom de inte längre behövdes, vilket både förenklade koden och förbättrade testbarheten.
             Jag tycker att testbar kod ofta är ett tecken på snygg och ren kod. När jag skrev om delar av koden insåg jag att kod som är lätt att testa också blir lättare att läsa, underhålla och utveckla vidare. Det handlar om att skapa tydliga gränser mellan klasser och metoder, och att hålla dem fokuserade på enskilda ansvarsområden.
-            Min TIL (Today I Learned) för detta kmom är definitivt hur viktigt det är att skriva testbar kod från början och hur mycket det kan underlätta när man arbetar med ett projekt över tid. Jag har också lärt mig att vara tålmodig med både testskrivning och felsökning, eftersom det är en process som kräver noggrannhet och uthållighet. Att se resultatet av tester som går igenom och en hög kodtäckning var verkligen motiverande och gav en känsla av kontroll över koden.'
-            ];
+            Min TIL (Today I Learned) för detta kmom är definitivt hur viktigt det är att skriva testbar kod från början och hur mycket det kan underlätta när man arbetar med ett projekt över tid. Jag har också lärt mig att vara tålmodig med både testskrivning och felsökning, eftersom det är en process som kräver noggrannhet och uthållighet. Att se resultatet av tester som går igenom och en hög kodtäckning var verkligen motiverande och gav en känsla av kontroll över koden.',
+            'Kmom05' => 'Att arbeta med övningen i Symfony och Doctrine gick överlag bra, även om det fanns vissa utmaningar längs vägen. Jag märkte att det är viktigt att ha en tydlig förståelse för hur entiteter och migreringar fungerar tillsammans för att undvika problem med databasen. En sak jag reagerade på var hur smidigt det blev att använda Doctrine för att hantera CRUD-operationer, där mycket av den tunga logiken hanteras automatiskt. Min applikation är en enkel biblioteksapplikation där användare kan lägga till, uppdatera, läsa och ta bort böcker. Jag valde att fokusera på enkelhet både i funktionalitet och användargränssnitt, med tydliga formulär och länkar för att navigera mellan sidor och utföra olika åtgärder.
+            När det gäller att arbeta med ORM i CRUD, upplevde jag att det förenklade processen avsevärt jämfört med att skriva SQL-frågor manuellt. Det var smidigt att arbeta med entiteter direkt i koden och låta Doctrine hantera databasinteraktionen. Samtidigt kräver det noggrannhet, då misstag som att glömma migreringar eller schema-synkronisering kan leda till svårdebuggade fel. Min uppfattning om ORM är att det är ett kraftfullt verktyg som gör applikationsutveckling mer strukturerad och säker. Det erbjuder en hög nivå av abstraktion som gör koden mer hanterbar, även om det ibland kan kännas överflödigt för enklare projekt. Jag uppskattar att det hjälper till att minska risken för vanliga problem som SQL-injektion och att det skapar en stark koppling mellan applikation och databas.
+            TIL för detta moment är hur Symfony och Doctrine kan användas för att bygga strukturerade applikationer med tydliga databasrelationer. Jag har lärt mig att arbeta mer systematiskt med migreringar, entiteter och repositories, och jag känner att detta moment har gett mig en stabil grund för att bygga skalbara webbapplikationer.',
+            'Kmom06' => 'Under arbetet med att analysera kodkvalitet med hjälp av PhpMetrics upplevde jag att verktyget var både användbart och överskådligt. Det gav tydliga rapporter och visualiseringar som gjorde det enkelt att identifiera problemområden i koden, till exempel komplexa metoder och låg sammanhållning i klasser. Jag uppskattade särskilt visualiseringarna som representerar komplexitet och underhållbarhet med cirklar i olika färger och storlekar. Det gav en snabb överblick och gjorde det lättare att prioritera vilka delar av koden som behövde förbättras först. Att se metrics som cyklomatisk komplexitet och klassens PageRank kändes också relevant och hjälpte till att förstå hur olika komponenter samverkar.
+            Att integrera med Scrutinizer gick förvånansvärt smidigt. Verktyget kopplades enkelt till mitt GitHub-repo, och efter första bygget fick jag en kodtäckning på 78% och en kodkvalitet på 8.5 av 10. Badges som genererades för kodkvalitet och testtäckning var inspirerande, då de gav en konkret indikator på kodens hälsa. Min första känsla var att Scrutinizer är ett kraftfullt verktyg som inte bara hjälper till att identifiera problem utan också uppmuntrar till att arbeta mot bättre kodstandarder. Möjligheten att använda badges i projektets README-fil känns också som ett motiverande sätt att visa upp projektets kvalitet för andra.
+            Min syn på kodkvalitet är att det är en avgörande faktor för hållbar och långsiktig utveckling. Kvaliteten på koden påverkar inte bara hur lätt den är att underhålla, utan också hur effektivt ett team kan samarbeta. Jag tror att badges kan fungera som ett bra sätt att påvisa kodkvalitet i viss mån, särskilt när det gäller att ge en överblick för externa intressenter. Men de ger inte hela bilden – djupare analys och kontext är fortfarande nödvändiga för att förstå vad som behöver förbättras.
+            Min största TIL (Today I Learned) för detta moment är hur viktiga dessa verktyg är i det dagliga utvecklingsarbetet och hur mycket man faktiskt kan lära sig om sin egen kod genom att granska den på detta sätt. Det är lätt att bli bekväm med att skriva kod som fungerar, men att reflektera över kvaliteten och göra förbättringar är lika viktigt. Att arbeta aktivt med metrics och refaktorering är något jag definitivt kommer att bära med mig framöver.'
+                        ];
 
         return $this->render('report.html.twig', ['reports' => $reports]);
     }
